<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ringdingdong.ridingthewind.model.mapper.MemberMapper">
	
	
	<resultMap type="memberDto" id="member">
		<result column="member_id" property="memberId"/>
		<result column="member_name" property="memberName"/>
	</resultMap>
	
	<!-- ADMIN -->
	<resultMap type="memberDto" id="memberAll" extends="member">
		<result column="member_password" property="memberPassword"/>
		<result column="email_id" property="emailId"/>
		<result column="email_domain" property="emailDomain"/>
		<result column="join_date" property="joinDate"/>
	</resultMap>

	<select id="idCheck" parameterType="String" resultType="int">
		select count(member_id)
		from member
		where member_id = #{memberId}
	</select>

	<insert id="joinMember" parameterType="memberDto">
		insert into member (member_id, member_name, member_password, member_phone, email_id, email_domain, join_date, birth, nickname)
		values (#{memberId}, #{memberName}, #{memberPassword}, #{memberPhone}, #{emailId}, #{emailDomain}, now(), #{birthday}, #{nickname})
	</insert>

	<select id="loginMember" parameterType="map" resultMap="member">
		select member_id, member_name
		from member
		where member_id = #{userId} and member_password = #{userPwd}
	</select>
	
	<!-- ADMIN -->
	<select id="listMember" resultMap="memberAll">
		select member_name, member_id, member_password, email_id, email_domain, join_date
		from member
		order by join_date
	</select>
	
	<select id="getMember" parameterType="string" resultMap="memberAll">
		select member_id, member_name, member_password, email_id, email_domain, join_date
		from member
		where member_id = #{memberId}
	</select>
	
	<update id="updateMember" parameterType="memberDto">
		update member
		<trim prefix="set" suffixOverrides=",">
			<if test="memberPassword != null">member_password = #{memberPassword},</if>
			<if test="emailId != null">email_id = #{emailId},</if>
			<if test="emailDomain != null">email_domain = #{emailDomain},</if>
		</trim>
		where member_id = #{memberId}
	</update>
	
	<delete id="deleteMember" parameterType="String">
		delete from member
		where member_id = #{memberId}
	</delete>
	
	<update id="saveRefreshToken" parameterType="map">
		update member
		set token = #{token}
		where member_id = #{memberId}
	</update>

	<select id="findMemberId" parameterType="String" resultMap="memberAll">
		select *
		from member
		where member_id = #{memberId}
	</select>

	
</mapper>
